## <summary>The open-source application container engine.</summary>

########################################
## <summary>
##	Execute container in the container domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`container_runtime_domtrans',`
	gen_require(`
		type container_runtime_t, container_runtime_exec_t;
		type container_runtime_tmpfs_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, container_runtime_exec_t, container_runtime_t)
	allow container_runtime_t $1:fifo_file setattr;
')

########################################
## <summary>
##	Execute container runtime in the container runtime domain
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`container_runtime_run',`
	gen_require(`
		type container_runtime_t;
	')

	container_runtime_domtrans($1)
	role $2 types container_runtime_t;
	allow $1 container_runtime_t:dbus send_msg;
')


########################################
## <summary>
##	Execute container in the caller domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`container_runtime_exec',`
	gen_require(`
		type container_runtime_exec_t;
	')

	corecmd_search_bin($1)
	can_exec($1, container_runtime_exec_t)
')

########################################
## <summary>
##	Read the process state of container runtime
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_read_state',`
	gen_require(`
		type container_runtime_t;
	')

	ps_process_pattern($1, container_runtime_t)
')

########################################
## <summary>
##	Search container lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_search_lib',`
	gen_require(`
		type container_var_lib_t;
	')

	allow $1 container_var_lib_t:dir search_dir_perms;
	files_search_var_lib($1)
')

########################################
## <summary>
##	Execute container lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_exec_lib',`
	gen_require(`
		type container_var_lib_t;
	')

	allow $1 container_var_lib_t:dir search_dir_perms;
	can_exec($1, container_var_lib_t)
')

########################################
## <summary>
##	Read container lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_read_lib_files',`
	gen_require(`
		type container_var_lib_t;
	')

	files_search_var_lib($1)
	read_files_pattern($1, container_var_lib_t, container_var_lib_t)
')

########################################
## <summary>
##	Read container share files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_read_share_files',`
	gen_require(`
		type container_ro_file_t;
	')

	files_search_var_lib($1)
	list_dirs_pattern($1, container_ro_file_t, container_ro_file_t)
	read_files_pattern($1, container_ro_file_t, container_ro_file_t)
	read_lnk_files_pattern($1, container_ro_file_t, container_ro_file_t)
')

########################################
## <summary>
##	Read container runtime tmpfs files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_runtime_read_tmpfs_files',`
	gen_require(`
		type container_runtime_tmpfs_t;
	')

	files_search_var_lib($1)
	list_dirs_pattern($1, container_runtime_tmpfs_t, container_runtime_tmpfs_t)
	read_files_pattern($1, container_runtime_tmpfs_t, container_runtime_tmpfs_t)
	read_lnk_files_pattern($1, container_runtime_tmpfs_t, container_runtime_tmpfs_t)
')

########################################
## <summary>
##	Manage container share files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_share_files',`
	gen_require(`
		type container_ro_file_t;
	')

	files_search_var_lib($1)
	list_dirs_pattern($1, container_ro_file_t, container_ro_file_t)
	manage_files_pattern($1, container_ro_file_t, container_ro_file_t)
	manage_lnk_files_pattern($1, container_ro_file_t, container_ro_file_t)
')

########################################
## <summary>
##	Manage container share dirs.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_share_dirs',`
	gen_require(`
		type container_ro_file_t;
	')

	files_search_var_lib($1)
	manage_dirs_pattern($1, container_ro_file_t, container_ro_file_t)
')

######################################
## <summary>
##	Allow the specified domain to execute container shared files
##	in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_exec_share_files',`
	gen_require(`
		type container_ro_file_t;
	')

	can_exec($1, container_ro_file_t)
')

########################################
## <summary>
##	Manage container config files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_config_files',`
	gen_require(`
		type container_config_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, container_config_t, container_config_t)
')

########################################
## <summary>
##	Manage container lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_lib_files',`
	gen_require(`
		type container_var_lib_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, container_var_lib_t, container_var_lib_t)
	manage_lnk_files_pattern($1, container_var_lib_t, container_var_lib_t)
')

########################################
## <summary>
##	Manage container files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_files',`
	gen_require(`
		type container_files_t;
	')

	manage_files_pattern($1, container_files_t, container_files_t)
	manage_lnk_files_pattern($1, container_files_t, container_files_t)
')

########################################
## <summary>
##	Manage container directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_dirs',`
	gen_require(`
		type container_files_t;
	')

	manage_dirs_pattern($1, container_files_t, container_files_t)
')

########################################
## <summary>
##	Manage container lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_manage_lib_dirs',`
	gen_require(`
		type container_var_lib_t;
	')

	files_search_var_lib($1)
	manage_dirs_pattern($1, container_var_lib_t, container_var_lib_t)
')

########################################
## <summary>
##	Create objects in a container var lib directory
##	with an automatic type transition to
##	a specified private type.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="private_type">
##	<summary>
##	The type of the object to create.
##	</summary>
## </param>
## <param name="object_class">
##	<summary>
##	The class of the object to be created.
##	</summary>
## </param>
## <param name="name" optional="true">
##	<summary>
##	The name of the object being created.
##	</summary>
## </param>
#
interface(`container_lib_filetrans',`
	gen_require(`
		type container_var_lib_t;
	')

	filetrans_pattern($1, container_var_lib_t, $2, $3, $4)
')

########################################
## <summary>
##	Read container PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_read_pid_files',`
	gen_require(`
		type container_var_run_t;
	')

	files_search_pids($1)
	read_files_pattern($1, container_var_run_t, container_var_run_t)
')

########################################
## <summary>
##	Execute container server in the container domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`container_systemctl',`
	gen_require(`
		type container_runtime_t;
		type container_unit_file_t;
	')

	systemd_exec_systemctl($1)
	init_reload_services($1)
	systemd_read_fifo_file_passwd_run($1)
	allow $1 container_unit_file_t:file read_file_perms;
	allow $1 container_unit_file_t:service manage_service_perms;

	ps_process_pattern($1, container_runtime_t)
')

########################################
## <summary>
##	Read and write container shared memory.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_rw_sem',`
	gen_require(`
		type container_runtime_t;
	')

	allow $1 container_runtime_t:sem rw_sem_perms;
')

########################################
## <summary>
##	Allow the specified domain to append
##	to container files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_append_file',`
	gen_require(`
		type container_file_t;
	')

	append_files_pattern($1, container_file_t, container_file_t)
')

#######################################
## <summary>
##  Read and write the container pty type.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`container_use_ptys',`
    gen_require(`
	type container_devpts_t;
    ')

    allow $1 container_devpts_t:chr_file rw_term_perms;
')

#######################################
## <summary>
##      Allow domain to create container content
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`container_filetrans_named_content',`

    gen_require(`
	type container_var_lib_t;
	type container_file_t;
	type container_ro_file_t;
	type container_log_t;
	type container_var_run_t;
	type container_home_t;
	type kubernetes_file_t;
	type container_runtime_tmpfs_t;
    ')

    files_pid_filetrans($1, container_var_run_t, file, "container.pid")
    files_pid_filetrans($1, container_var_run_t, file, "docker.pid")
    files_pid_filetrans($1, container_var_run_t, sock_file, "container.sock")
    files_pid_filetrans($1, container_var_run_t, dir, "container-client")
    files_pid_filetrans($1, container_var_run_t, dir, "docker")
    files_pid_filetrans($1, container_var_run_t, dir, "containerd")
    files_pid_filetrans($1, container_var_run_t, dir, "ocid")
    files_pid_filetrans($1, container_var_run_t, dir, "containers")
    files_pid_filetrans($1, container_kvm_var_run_t, dir, "kata-containers")

    logging_log_filetrans($1, container_log_t, dir, "lxc")
    files_var_lib_filetrans($1, container_var_lib_t, dir, "containers")
    files_var_lib_filetrans($1, container_file_t, dir, "origin")
    files_var_lib_filetrans($1, container_var_lib_t, dir, "ocid")
    files_var_lib_filetrans($1, container_var_lib_t, dir, "docker")
    files_var_lib_filetrans($1, container_var_lib_t, dir, "docker-latest")
    files_var_filetrans($1, container_ro_file_t, dir, "kata-containers")
    files_var_lib_filetrans($1, container_ro_file_t, dir, "kata-containers")

    filetrans_pattern($1, container_var_lib_t, container_file_t, dir, "_data")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, file, "config.env")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, file, "hosts")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, file, "hostname")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, file, "resolv.conf")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "sandboxes")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "snapshots")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "init")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "overlay")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "overlay-images")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "overlay-layers")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "overlay2")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "overlay2-images")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "overlay2-layers")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "atomic")
    userdom_admin_home_dir_filetrans($1, container_home_t, dir, ".container")
    filetrans_pattern($1, container_var_lib_t, container_ro_file_t, dir, "kata-containers")
    filetrans_pattern($1, container_var_run_t, container_runtime_tmpfs_t, dir, "shm")
    files_pid_filetrans($1, kubernetes_file_t, dir, "kubernetes")
')

########################################
## <summary>
##	Connect to container over a unix stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_stream_connect',`
	gen_require(`
		type container_runtime_t, container_var_run_t, container_runtime_tmpfs_t;
	')

	files_search_pids($1)
	stream_connect_pattern($1, container_var_run_t, container_var_run_t, container_runtime_t)
	stream_connect_pattern($1, container_runtime_tmpfs_t, container_runtime_tmpfs_t, container_runtime_t)
	allow $1 container_runtime_tmpfs_t:lnk_file read_lnk_file_perms;
')

########################################
## <summary>
##	Connect to SPC containers over a unix stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_spc_stream_connect',`
	gen_require(`
		type spc_t, spc_var_run_t;
	')

	files_search_pids($1)
	files_write_all_pid_sockets($1)
	allow $1 spc_t:unix_stream_socket connectto;
')

########################################
## <summary>
##	All of the rules required to administrate
##	an container environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_admin',`
	gen_require(`
		type container_runtime_t;
		type container_var_lib_t, container_var_run_t;
		type container_unit_file_t;
		type container_lock_t;
		type container_log_t;
		type container_config_t;
	')

	allow $1 container_runtime_t:process { ptrace signal_perms };
	ps_process_pattern($1, container_runtime_t)

	admin_pattern($1, container_config_t)

	files_search_var_lib($1)
	admin_pattern($1, container_var_lib_t)

	files_search_pids($1)
	admin_pattern($1, container_var_run_t)

	files_search_locks($1)
	admin_pattern($1, container_lock_t)

	logging_search_logs($1)
	admin_pattern($1, container_log_t)

	container_systemctl($1)
	admin_pattern($1, container_unit_file_t)
	allow $1 container_unit_file_t:service all_service_perms;

	optional_policy(`
		systemd_passwd_agent_exec($1)
		systemd_read_fifo_file_passwd_run($1)
	')
')

########################################
## <summary>
##	Execute container_auth_exec_t in the container_auth domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`container_auth_domtrans',`
	gen_require(`
		type container_auth_t, container_auth_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, container_auth_exec_t, container_auth_t)
')

######################################
## <summary>
##	Execute container_auth in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_auth_exec',`
	gen_require(`
		type container_auth_exec_t;
	')

	corecmd_search_bin($1)
	can_exec($1, container_auth_exec_t)
')

########################################
## <summary>
##	Connect to container_auth over a unix stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_auth_stream_connect',`
	gen_require(`
		type container_auth_t, container_plugin_var_run_t;
	')

	files_search_pids($1)
	stream_connect_pattern($1, container_plugin_var_run_t, container_plugin_var_run_t, container_auth_t)
')

########################################
## <summary>
##	container domain typebounds calling domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain to be typebound.
## </summary>
## </param>
#
interface(`container_runtime_typebounds',`
	gen_require(`
		type container_runtime_t;
	')

	allow container_runtime_t $1:process2 nnp_transition;
')

########################################
## <summary>
##	Allow any container_runtime_exec_t to be an entrypoint of this domain
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`container_runtime_entrypoint',`
	gen_require(`
		type container_runtime_exec_t;
	')
	allow $1 container_runtime_exec_t:file entrypoint;
')

interface(`docker_exec_lib',`
	container_exec_lib($1)
')

interface(`docker_read_share_files',`
	container_read_share_files($1)
')

interface(`docker_exec_share_files',`
	container_exec_share_files($1)
')

interface(`docker_manage_lib_files',`
	container_manage_lib_files($1)
')


interface(`docker_manage_lib_dirs',`
	container_manage_lib_dirs($1)
')

interface(`docker_lib_filetrans',`
	container_lib_filetrans($1, $2, $3, $4)
')

interface(`docker_read_pid_files',`
	container_read_pid_files($1)
')

interface(`docker_systemctl',`
	container_systemctl($1)
')

interface(`docker_use_ptys',`
	container_use_ptys($1)
')

interface(`docker_stream_connect',`
	container_stream_connect($1)
')

interface(`docker_spc_stream_connect',`
	container_spc_stream_connect($1)
')

########################################
## <summary>
##	Read the process state of spc containers
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_spc_read_state',`
	gen_require(`
		type spc_t;
	')

	ps_process_pattern($1, spc_t)
')

########################################
## <summary>
##	Creates types and rules for a basic
##	container runtime process domain.
## </summary>
## <param name="prefix">
##	<summary>
##	Prefix for the domain.
##	</summary>
## </param>
#
template(`container_runtime_domain_template',`
	gen_require(`
		attribute container_runtime_domain;
		type container_runtime_t;
		type container_var_lib_t;
		type container_ro_file_t;
		role system_r, sysadm_r;
	')

	type $1_t, container_runtime_domain;
	role system_r types $1_t;
	role sysadm_r types $1_t;
	domain_type($1_t)
	domain_subj_id_change_exemption($1_t)
	domain_role_change_exemption($1_t)

	kernel_read_system_state($1_t)
	kernel_read_all_proc($1_t)

	mls_file_read_to_clearance($1_t)
	mls_file_write_to_clearance($1_t)

	storage_raw_rw_fixed_disk($1_t)
	auth_use_nsswitch($1_t)
	logging_send_syslog_msg($1_t)
')

########################################
## <summary>
##	Creates types and rules for a basic
##	container process domain.
## </summary>
## <param name="prefix">
##	<summary>
##	Prefix for the domain.
##	</summary>
## </param>
#
template(`container_domain_template',`
	gen_require(`
		attribute container_domain;
		type container_runtime_t;
		type container_var_lib_t;
		type container_ro_file_t;
	')

	type $1_t, container_domain;
	domain_type($1_t)
	domain_user_exemption_target($1_t)
	mls_rangetrans_target($1_t)
	mcs_constrained($1_t)
	role system_r types $1_t;

	kernel_read_all_proc($1_t)
')

########################################
## <summary>
##	Read and write a spc_t unnamed pipe.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`container_spc_rw_pipes',`
	gen_require(`
		type spc_t;
	')

	allow $1 spc_t:fifo_file rw_inherited_fifo_file_perms;
')

ifndef(`distro_ubuntu',`
## kernel/kernel.if
########################################
## <summary>
##	Allow attempts to read all proc types.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`kernel_read_all_proc',`
	gen_require(`
		attribute proc_type;
        attribute can_dump_kernel;
        attribute can_receive_kernel_messages;
	')

	read_files_pattern($1, proc_type, proc_type)
    typeattribute $1 can_dump_kernel;
    typeattribute $1 can_receive_kernel_messages;
')

## system/systemd.if
#######################################
## <summary>
##      Create a file type used for systemd unit files.
## </summary>
## <param name="script_file">
##      <summary>
##      Type to be used for an unit file.
##      </summary>
## </param>
#
interface(`systemd_unit_file',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')

        typeattribute $1 systemd_unit_file_type;
        files_type($1)
')

## system/userdomain.if
########################################
## <summary>
##      Create objects in the /root directory
##      with an automatic type transition to
##      a specified private type.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <param name="private_type">
##      <summary>
##      The type of the object to create.
##      </summary>
## </param>
## <param name="object_class">
##      <summary>
##      The class of the object to be created.
##      </summary>
## </param>
## <param name="name" optional="true">
##      <summary>
##      The name of the object being created.
##      </summary>
## </param>
#
interface(`userdom_admin_home_dir_filetrans',`
        gen_require(`
                type admin_home_t;
        ')

        allow $1 admin_home_t:lnk_file read_lnk_file_perms;
        filetrans_pattern($1, admin_home_t, $2, $3, $4)
')

## system/userdomain.if
#######################################
## <summary>
##      Manage all files/directories in the homedir
## </summary>
## <param name="userdomain">
##      <summary>
##      The user domain
##      </summary>
## </param>
## <rolebase/>
#
interface(`userdom_manage_user_home_content',`
        gen_require(`
                type user_home_dir_t, user_home_t;
                attribute user_home_type;
        ')

        files_list_home($1)
        manage_dirs_pattern($1, { user_home_dir_t user_home_type }, user_home_type)
        manage_files_pattern($1, { user_home_dir_t user_home_type }, user_home_type)
        manage_lnk_files_pattern($1, { user_home_dir_t user_home_type }, user_home_type)
        manage_sock_files_pattern($1, { user_home_dir_t user_home_type }, user_home_type)
        manage_fifo_files_pattern($1, { user_home_dir_t user_home_type }, user_home_type)
        filetrans_pattern($1, user_home_dir_t, user_home_t, { dir file lnk_file sock_file fifo_file })

')

## kernel/terminal.if
########################################
## <summary>
##      Read and write the inherited console, all inherited
##      ttys and ptys.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`term_use_all_inherited_terms',`
        gen_require(`
                attribute ttynode, ptynode;
                type console_device_t, devpts_t, tty_device_t;
        ')

        allow $1 { devpts_t console_device_t tty_device_t ttynode ptynode }:chr_file rw_inherited_term_perms;
')

## system/userdomain.if
#######################################
## <summary>
##      Mmap user temporary files
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolebase/>
#
interface(`userdom_map_tmp_files',`
        gen_require(`
                type user_tmp_t;
        ')

        allow $1 user_tmp_t:file map;
')

## contrib/gnome.if
########################################
## <summary>
##      Read generic data home files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`gnome_map_generic_data_home_files',`
        gen_require(`
                type data_home_t, gconf_home_t;
        ')

allow $1 data_home_t:file map;
allow $1 gconf_home_t:file map;
')

## kernel/files.if
########################################
## <summary>
##      Do not audit attempts to unmount all mount points.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`files_dontaudit_unmount_all_mountpoints',`
        gen_require(`
                attribute mountpoint;
        ')

        dontaudit $1 mountpoint:filesystem unmount;
')

## kernel/filesystem.if
########################################
## <summary>
##      Read and write sockets of ONLOAD file system pipes.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_rw_onload_sockets',`
        gen_require(`
                type onload_fs_t;
        ')

        rw_files_pattern($1, onload_fs_t, onload_fs_t)
        rw_fifo_files_pattern($1, onload_fs_t, onload_fs_t)
        rw_sock_files_pattern($1, onload_fs_t, onload_fs_t)
        allow $1 onload_fs_t:sock_file ioctl;
')

## system/init.if
########################################
## <summary>
##      Get the system status information from init
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`init_status',`
        gen_require(`
                type init_t;
		class service status;
        ')

        allow $1 init_t:system status;
        allow $1 init_t:service status;
')

## system/init.if
########################################
## <summary>
##      Stop system from init
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`init_stop',`
        gen_require(`
                type init_t;
        ')

        allow $1 init_t:system stop;
')

## system/init.if
########################################
## <summary>
##      Start  system from init
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`init_start',`
        gen_require(`
                type init_t;
        ')

        allow $1 init_t:system start;
')

## system/init.if
########################################
## <summary>
##      Allow the specified domain to modify the systemd configuration of
##      transient scripts.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`init_manage_config_transient_files',`
        gen_require(`
                type init_var_run_t;
                class service manage_service_perms;
        ')

        allow $1 init_var_run_t:service manage_service_perms;
')

## system/miscfiles.if
########################################
## <summary>
##      Do not audit attempts to access check cert dirs/files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`miscfiles_dontaudit_access_check_cert',`
        gen_require(`
                type cert_t;
        ')

        dontaudit $1 cert_t:file audit_access;
    dontaudit $1 cert_t:dir audit_access;
')

## services/ssh.if
########################################
## <summary>
##      Read and write inherited sshd pty type.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`ssh_use_ptys',`
        gen_require(`
                type sshd_devpts_t;
                class chr_file rw_inherited_chr_file_perms;
        ')

        allow $1 sshd_devpts_t:chr_file rw_inherited_chr_file_perms;
')

## contrib/openvswitch.if
########################################
## <summary>
##      Allow stream connect to openvswitch.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#

interface(`openvswitch_stream_connect',`
    gen_require(`
            type openvswitch_t, openvswitch_var_run_t;
                ')

    files_search_pids($1)
    stream_connect_pattern($1, openvswitch_var_run_t, openvswitch_var_run_t, openvswitch_t)
')

## kernel/domain.if
#####################################
## <summary>
##  named_filetrans_domain stub attribute interface.  No access allowed.
## </summary>
## <param name="domain" unused="true">
##  <summary>
##  Domain allowed access
##  </summary>
## </param>
#
interface(`domain_stub_named_filetrans_domain',`
    gen_require(`
        attribute named_filetrans_domain;
    ')
')

## kernel/kernel.if
########################################
## <summary>
##      Dontaudit attempts to set the priority of kernel threads.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`kernel_dontaudit_setsched',`
        gen_require(`
                type kernel_t;
        ')

        dontaudit $1 kernel_t:process setsched;
')

## kernel/kernel.if
########################################
## <summary>
##      Allow caller to mounton the kernel messages file
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`kernel_mounton_messages',`
        gen_require(`
                type proc_kmsg_t;
        ')

        allow $1 proc_kmsg_t:file mounton;
')

## kernel/kernel.if
########################################
## <summary>
##      Allow attempts to mounton all proc directories.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`kernel_mounton_all_proc',`
        gen_require(`
                attribute proc_type;
        ')

        allow $1 proc_type:dir mounton;
        allow $1 proc_type:file mounton;
')

## kernel/kernel.if
########################################
## <summary>
##      Allow attempts to mounton all sysctl directories.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`kernel_mounton_all_sysctls',`
        gen_require(`
                attribute sysctl_type;
        ')

        allow $1 sysctl_type:dir mounton;
')

## kernel/kernel.if
########################################
## <summary>
##      Do not audit attempts to check the
##      access on generic proc entries.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`kernel_dontaudit_access_check_proc',`
        gen_require(`
                type proc_t;
        ')

        dontaudit $1 proc_t:dir_file_class_set audit_access;
')

## kernel/kernel.if
########################################
## <summary>
##      Do not audit attempts to set the
##      attributes of files in /proc.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`kernel_dontaudit_setattr_proc_files',`
        gen_require(`
                type proc_t;
        ')

        dontaudit $1 proc_t:file setattr;
')

## kernel/kernel.if
########################################
## <summary>
##      Dontaudit write usermodehelper state
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
## <rolecap/>
#
interface(`kernel_dontaudit_write_usermodehelper_state',`
        gen_require(`
                type usermodehelper_t;
        ')

        dontaudit $1 usermodehelper_t:file write;
')

## kernel/devices.if
########################################
## <summary>
##      Allow getattr on all device nodes.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dev_getattr_all',`
        gen_require(`
                attribute device_node;
                type device_t;
        ')

        allow $1 { device_t device_node }:dir_file_class_set getattr;
')

## kernel/devices.if
########################################
## <summary>
##      Get attributes of sysfs filesystems.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dev_getattr_sysfs_fs',`
        gen_require(`
                type sysfs_t;
        ')

        allow $1 sysfs_t:filesystem getattr;
')

## kernel/devices.if
########################################
## <summary>
##      Read the memory type range registers (MTRR).
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dev_read_mtrr',`
        gen_require(`
                type device_t, mtrr_device_t;
        ')

        read_files_pattern($1, device_t, mtrr_device_t)
        read_chr_files_pattern($1, device_t, mtrr_device_t)
')

## kernel/files.if
########################################
## <summary>
##      Getattr of directories on new filesystems
##      that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_getattr_isid_type_dirs',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:dir getattr;
')

## kernel/files.if
########################################
## <summary>
##      Create, read, write, and delete directories
##      on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_manage_isid_type_dirs',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:dir manage_dir_perms;
')

## kernel/files.if
########################################
## <summary>
##      Create, read, write, and delete files
##      on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_manage_isid_type_files',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:file manage_file_perms;
')

## kernel/files.if
########################################
## <summary>
##      Create, read, write, and delete symbolic links
##      on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_manage_isid_type_symlinks',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:lnk_file manage_lnk_file_perms;
')

## kernel/files.if
########################################
## <summary>
##      Create, read, write, and delete character device nodes
##      on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_manage_isid_type_chr_files',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:chr_file manage_chr_file_perms;
')

## kernel/files.if
########################################
## <summary>
##      Create, read, write, and delete block device nodes
##      on new filesystems that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_manage_isid_type_blk_files',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:blk_file manage_blk_file_perms;
')

## kernel/files.if
########################################
## <summary>
##      Execute files on new filesystems
##      that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_exec_isid_files',`
        gen_require(`
                type unlabeled_t;
        ')

        can_exec($1, unlabeled_t)
')

## kernel/files.if
########################################
## <summary>
##      Moundon directories on new filesystems
##      that have not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_mounton_isid',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:dir mounton;
')

## kernel/files.if
########################################
## <summary>
##      Mount a filesystem on a new chr_file
##      that has not yet been labeled.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_mounton_isid_type_chr_file',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:chr_file mounton;
')

## kernel/filesystem.if
#######################################
## <summary>
##  Read and write nsfs inodes (e.g. /proc/pid/ns/uts)
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_rw_nsfs_files',`
        gen_require(`
                type nsfs_t;
        ')

        rw_files_pattern($1, nsfs_t, nsfs_t)
')

## kernel/filesystem.if
########################################
## <summary>
##      Read and write generic tmpfs files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_rw_inherited_tmpfs_files',`
        gen_require(`
                type tmpfs_t;
        ')

        allow $1 tmpfs_t:file { read write };
')

## kernel/filesystem.if
########################################
## <summary>
##      Manage  hugetlbfs files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_manage_hugetlbfs_files',`
        gen_require(`
                type hugetlbfs_t;
        ')

        manage_files_pattern($1, hugetlbfs_t, hugetlbfs_t)
')

## kernel/terminal.if
########################################
## <summary>
##      Mounton unallocated tty device nodes.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`term_mounton_unallocated_ttys',`
        gen_require(`
                type tty_device_t;
        ')

        allow $1 tty_device_t:chr_file mounton;
')

## system/modutils.if
########################################
## <summary>
##      Execute insmod in the kmod domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed to transition.
##      </summary>
## </param>
#
interface(`modutils_domtrans_kmod',`
        gen_require(`
                type kmod_t, kmod_exec_t;
        ')

        corecmd_search_bin($1)
        domtrans_pattern($1, kmod_exec_t, kmod_t)

    allow $1 kmod_exec_t:file map;
')

## system/systemd.if
#######################################
## <summary>
##  Start power unit files domain.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed to transition.
##  </summary>
## </param>
#
interface(`systemd_status_all_unit_files',`
    gen_require(`
        attribute systemd_unit_file_type;
    ')

    systemd_exec_systemctl($1)
    allow $1 systemd_unit_file_type:service status;
')

## system/systemd.if
########################################
## <summary>
##      Execute systemctl in the caller domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_exec_systemctl',`
        gen_require(`
                type systemd_systemctl_exec_t;
        ')

        corecmd_search_bin($1)
        can_exec($1, systemd_systemctl_exec_t)

        fs_list_cgroup_dirs($1)
        fs_read_cgroup_files($1)
        systemd_list_unit_dirs($1)
        init_list_pid_dirs($1)
        init_read_state($1)
        init_stream_send($1)
        init_stream_connect($1)

        systemd_login_list_pid_dirs($1)
        systemd_login_read_pid_files($1)
        systemd_passwd_agent_exec($1)

        dontaudit $1 self:capability net_admin;
')

## system/systemd.if
######################################
## <summary>
##      Allow domain to list systemd unit dirs.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_list_unit_dirs',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')

        files_search_var_lib($1)
        allow $1 systemd_unit_file_type:dir list_dir_perms;
')

## system/init.if
######################################
## <summary>
##  Allow listing of the /run/systemd directory.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`init_list_pid_dirs',`
    gen_require(`
        type init_var_run_t;
    ')

    allow $1 init_var_run_t:dir list_dir_perms;
')

## system/init.if
########################################
## <summary>
##      Send a message to init over a unix domain
##      stream socket.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`init_stream_send',`
        gen_require(`
                type init_t;
        ')

        allow $1 init_t:unix_stream_socket sendto;
')

## system/systemd.if
######################################
## <summary>
##      Read systemd_login PID files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_login_list_pid_dirs',`
        gen_require(`
                type systemd_logind_var_run_t;
        ')

        files_search_pids($1)
        list_dirs_pattern($1, systemd_logind_var_run_t, systemd_logind_var_run_t)
')

## system/systemd.if
######################################
## <summary>
##      Read systemd_login PID files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_login_read_pid_files',`
        gen_require(`
                type systemd_logind_var_run_t;
        ')

        files_search_pids($1)
        read_files_pattern($1, systemd_logind_var_run_t, systemd_logind_var_run_t)
')

## system/systemd.if
#######################################
## <summary>
##  Execute systemd-tty-ask-password-agent in the caller domain
## </summary>
## <param name="domain">
## <summary>
##  Domain allowed access.
## </summary>
## </param>
#
interface(`systemd_passwd_agent_exec',`
        gen_require(`
                type systemd_passwd_agent_t, systemd_passwd_agent_exec_t;
        ')

        can_exec($1, systemd_passwd_agent_exec_t)
        systemd_manage_passwd_run($1)
')

## system/systemd.if
#######################################
## <summary>
##  Send generic signals to systemd_passwd_agent processes.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`systemd_manage_passwd_run',`
        gen_require(`
                type systemd_passwd_agent_t;
                type systemd_passwd_var_run_t;
        ')

        init_search_pid_dirs($1)
        manage_files_pattern($1, systemd_passwd_var_run_t, systemd_passwd_var_run_t)
        manage_sock_files_pattern($1, systemd_passwd_var_run_t, systemd_passwd_var_run_t)
        manage_fifo_files_pattern($1, systemd_passwd_var_run_t, systemd_passwd_var_run_t)

        allow systemd_passwd_agent_t $1:process signull;
        allow systemd_passwd_agent_t $1:unix_dgram_socket sendto;
')

## system/init.if
######################################
## <summary>
##  Allow search  directory in the /run/systemd directory.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`init_search_pid_dirs',`
    gen_require(`
        type init_var_run_t;
    ')

    allow $1 init_var_run_t:dir search_dir_perms;
')

## system/systemd.if
########################################
## <summary>
##      Allow the specified domain to start systemd services.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_start_systemd_services',`
        gen_require(`
                type systemd_unit_file_t;
        ')

        allow $1 systemd_unit_file_t:service start;
')

## system/userdomain.if
########################################
## <summary>
##      Connect to users over a unix stream socket.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`userdom_stream_connect',`
        gen_require(`
                type user_tmp_t;
                attribute userdomain;
        ')

        stream_connect_pattern($1, user_tmp_t, user_tmp_t, userdomain)
')

## system/userdomain.if
########################################
## <summary>
##      Relabel user home files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`userdom_relabel_user_home_files',`
        gen_require(`
                type user_home_t;
        ')

        allow $1 user_home_t:file relabel_file_perms;
')

## system/userdomain.if
########################################
## <summary>
##      Relabel user tmp files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`userdom_relabel_user_tmp_files',`
        gen_require(`
                type user_tmp_t;
        ')

        allow $1 user_tmp_t:file relabel_file_perms;
')

## system/userdomain.if
########################################
## <summary>
##      Relabel user tmp files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`userdom_relabel_user_tmp_dirs',`
        gen_require(`
                type user_tmp_t;
        ')

        allow $1 user_tmp_t:dir relabel_dir_perms;
')

## system/userdomain.if
########################################
## <summary>
##      Read and write  userdomain stream.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`userdom_connectto_stream',`
        gen_require(`
                attribute userdomain;
        ')

        allow $1 userdomain:unix_stream_socket connectto;
')

## kernel/filesystem.if
#########################################
## <summary>
##      Create, read, write, and delete named sockets
##      on a FUSEFS filesystem.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_manage_fusefs_named_sockets',`
        gen_require(`
                type fusefs_t;
        ')

        manage_sock_files_pattern($1, fusefs_t, fusefs_t)
')

## kernel/filesystem.if
########################################
## <summary>
##      Manage symbolic links on a FUSEFS filesystem.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_manage_fusefs_symlinks',`
        gen_require(`
                type fusefs_t;
        ')

        manage_lnk_files_pattern($1, fusefs_t, fusefs_t)
')

## kernel/files.if
#########################################
## <summary>
##      Write all sockets
##      in the /var/run directory.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_write_all_pid_sockets',`
        gen_require(`
                attribute pidfile;
        ')

        allow $1 pidfile:sock_file write_sock_file_perms;
')

## kernel/filesystem.if
########################################
## <summary>
##      Dontaudit remount a tmpfs filesystem.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`fs_dontaudit_remount_tmpfs',`
        gen_require(`
                type tmpfs_t;
        ')

        dontaudit $1 tmpfs_t:filesystem remount;
')

## kernel/devices.if
########################################
## <summary>
##      Dontaudit attempts to mount a filesystem on /sys
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`dev_dontaudit_mounton_sysfs',`
        gen_require(`
                type sysfs_t;
        ')

        dontaudit $1 sysfs_t:dir mounton;
')

## contrib/dbus.if
#######################################
## <summary>
##      Template for creating connections to
##      the system DBUS.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dbus_system_bus_client',`
        gen_require(`
                type system_dbusd_t, system_dbusd_t;
                type system_dbusd_var_run_t, system_dbusd_var_lib_t;
                class dbus send_msg;
                attribute dbusd_unconfined;
        ')

        # SE-DBus specific permissions
        allow $1 { system_dbusd_t self }:dbus send_msg;
        allow { system_dbusd_t dbusd_unconfined } $1:dbus send_msg;

        read_files_pattern($1, system_dbusd_var_lib_t, system_dbusd_var_lib_t)
        read_lnk_files_pattern($1, system_dbusd_var_lib_t, system_dbusd_var_lib_t)
        files_search_var_lib($1)

        dev_read_urand($1)

        # For connecting to the bus
        files_search_pids($1)
        stream_connect_pattern($1, system_dbusd_var_run_t, system_dbusd_var_run_t, system_dbusd_t)
        dbus_read_config($1)

    optional_policy(`
        unconfined_server_dbus_chat($1)
    ')
')

## system/unconfined.if
########################################
## <summary>
##      Allow caller domain to dbus chat unconfined_server.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`unconfined_server_dbus_chat',`
        gen_require(`
                type unconfined_service_t;
        class dbus send_msg;
        ')

        allow $1 unconfined_service_t:dbus send_msg;
        allow unconfined_service_t $1:dbus send_msg;
')

## contrib/dbus.if
#######################################
## <summary>
##      Template for creating connections to
##      a user DBUS.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dbus_session_bus_client',`
        gen_require(`
                attribute session_bus_type;
                class dbus send_msg;
        ')

        # SE-DBus specific permissions
        allow $1 { session_bus_type self }:dbus send_msg;

        # For connecting to the bus
        allow $1 session_bus_type:unix_stream_socket connectto;

        allow session_bus_type $1:process sigkill;
')

## system/init.if
########################################
## <summary>
##      Tell init to do an unknown access.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`init_start_transient_unit',`
        gen_require(`
                type init_t;
        ')

        allow $1 init_t:service start;
')

## system/systemd.if
########################################
## <summary>
##      Send and receive messages from
##      systemd machined over dbus.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_dbus_chat_machined',`
        gen_require(`
                type systemd_machined_t;
                class dbus send_msg;
        ')

        allow $1 systemd_machined_t:dbus send_msg;
        allow systemd_machined_t $1:dbus send_msg;
        ps_process_pattern(systemd_machined_t, $1)
')

## contrib/dnsmasq.if
########################################
## <summary>
##      Send and receive messages from
##      dnsmasq over dbus.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dnsmasq_dbus_chat',`
        gen_require(`
                type dnsmasq_t;
                class dbus send_msg;
        ')

        allow $1 dnsmasq_t:dbus send_msg;
        allow dnsmasq_t $1:dbus send_msg;
')

## roles/unconfineduser.if
######################################
## <summary>
##      Stub unconfined role.
## </summary>
## <param name="domain_prefix">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`unconfined_stub_role',`
        gen_require(`
                role unconfined_r;
        ')
')

## kernel/filesystem.if
########################################
## <summary>
##      Make general progams in FUSEFS an entrypoint for
##      the specified domain.
## </summary>
## <param name="domain">
##      <summary>
##      The domain for which fusefs_t is an entrypoint.
##      </summary>
## </param>
#
interface(`fs_fusefs_entrypoint',`
        gen_require(`
                type fusefs_t;
        ')

    allow $1 fusefs_t:file entrypoint;
')

## contrib/virt.if
########################################
## <summary>
##      Execute virtd in the caller domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_exec',`
        gen_require(`
                type virtd_exec_t;
        ')

        can_exec($1, virtd_exec_t)
')

## contrib/virt.if
#######################################
## <summary>
##      Connect to virt over a unix domain stream socket.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_stream_connect_sandbox',`
        gen_require(`
                attribute svirt_sandbox_domain;
                attribute svirt_file_type;
        ')

        files_search_pids($1)
        stream_connect_pattern($1, svirt_file_type, svirt_file_type, svirt_sandbox_domain)
        ps_process_pattern(svirt_sandbox_domain, $1)
')

## contrib/virt.if
#######################################
## <summary>
##      Execute Sandbox Files
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_exec_sandbox_files',`
        gen_require(`
                attribute svirt_file_type;
        ')

        can_exec($1, svirt_file_type)
')

## contrib/virt.if
#######################################
## <summary>
##      Manage Sandbox Files
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_manage_sandbox_files',`
        gen_require(`
                attribute svirt_file_type;
        ')

        manage_dirs_pattern($1, svirt_file_type, svirt_file_type)
        manage_files_pattern($1, svirt_file_type, svirt_file_type)
        manage_fifo_files_pattern($1, svirt_file_type, svirt_file_type)
        manage_chr_files_pattern($1, svirt_file_type, svirt_file_type)
        manage_lnk_files_pattern($1, svirt_file_type, svirt_file_type)
        allow $1 svirt_file_type:dir_file_class_set { relabelfrom relabelto };
')

## contrib/virt.if
#######################################
## <summary>
##      Relabel Sandbox File systems
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_relabel_sandbox_filesystem',`
        gen_require(`
                attribute svirt_file_type;
        ')

        allow $1 svirt_file_type:filesystem { relabelfrom relabelto };
')

## contrib/virt.if
#######################################
## <summary>
##      Mounton Sandbox Files
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_mounton_sandbox_file',`
        gen_require(`
                attribute svirt_file_type;
        ')

        allow $1 svirt_file_type:dir_file_class_set mounton;
')

## contrib/virt.if
########################################
## <summary>
##      Allow any svirt_file_type to be an entrypoint of this domain
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`virt_sandbox_entrypoint',`
        gen_require(`
                attribute svirt_file_type;
        ')
        allow $1 svirt_file_type:file entrypoint;
')

## contrib/virt.if
########################################
## <summary>
##      virtd_lxc_t stub interface.  No access allowed.
## </summary>
## <param name="domain" unused="true">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_stub_lxc',`
        gen_require(`
                type virtd_lxc_t;
        ')
')

## contrib/dbus.if
########################################
## <summary>
##      Allow attempts to send dbus
##      messages to system bus types.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`dbus_chat_system_bus',`
        gen_require(`
                attribute system_bus_type;
                class dbus send_msg;
        ')

        allow $1 system_bus_type:dbus send_msg;
        allow system_bus_type $1:dbus send_msg;
')

## contrib/dbus.if
########################################
## <summary>
##      Do not audit attempts to send dbus
##      messages to session bus types.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`dbus_chat_session_bus',`
        gen_require(`
                attribute session_bus_type;
                class dbus send_msg;
        ')

        allow $1 session_bus_type:dbus send_msg;
        allow session_bus_type $1:dbus send_msg;
')

## contrib/virt.if
########################################
## <summary>
##      Execute qemu in the svirt domain, and
##      allow the specified role the svirt domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access
##      </summary>
## </param>
## <param name="role">
##      <summary>
##      The role to be allowed the sandbox domain.
##      </summary>
## </param>
## <rolecap/>
#
interface(`virt_transition_svirt_sandbox',`
        gen_require(`
                attribute svirt_sandbox_domain;
        ')

        allow $1 svirt_sandbox_domain:process { transition signal_perms };
        role $2 types svirt_sandbox_domain;
        allow $1 svirt_sandbox_domain:unix_dgram_socket sendto;

        allow svirt_sandbox_domain $1:fd use;

        allow svirt_sandbox_domain $1:process sigchld;
        ps_process_pattern($1, svirt_sandbox_domain)
')

## contrib/virt.if
########################################
## <summary>
##      Execute a file in a sandbox directory
##      in the specified domain.
## </summary>
## <desc>
##      <p>
##      Execute a file in a sandbox directory
##      in the specified domain.  This allows
##      the specified domain to execute any file
##      on these filesystems in the specified
##      domain.
##      </p>
## </desc>
## <param name="domain">
##      <summary>
##      Domain allowed to transition.
##      </summary>
## </param>
## <param name="target_domain">
##      <summary>
##      The type of the new process.
##      </summary>
## </param>
#
interface(`virt_sandbox_domtrans',`
        gen_require(`
                type container_file_t;
        ')

        domtrans_pattern($1,container_file_t, $2)
')

## contrib/virt.if
########################################
## <summary>
##      Execute qemu in the svirt domain, and
##      allow the specified role the svirt domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access
##      </summary>
## </param>
## <param name="role">
##      <summary>
##      The role to be allowed the sandbox domain.
##      </summary>
## </param>
## <rolecap/>
#
interface(`virt_transition_svirt',`
        gen_require(`
                attribute virt_domain;
                type virt_bridgehelper_t;
                type svirt_image_t;
                type svirt_socket_t;
        ')

        allow $1 virt_domain:process transition;
        role $2 types virt_domain;
        role $2 types virt_bridgehelper_t;
        role $2 types svirt_socket_t;

        allow $1 virt_domain:process { sigkill sigstop signull signal };
        allow $1 svirt_image_t:file { relabelfrom relabelto };
        allow $1 svirt_image_t:fifo_file { read_fifo_file_perms relabelto };
        allow $1 svirt_image_t:sock_file { create_sock_file_perms relabelto };
        allow $1 svirt_socket_t:unix_stream_socket create_stream_socket_perms;

        optional_policy(`
                ptchown_run(virt_domain, $2)
        ')
')

## kernel/filesystem.if
########################################
## <summary>
##      Execute hugetlbfs files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_exec_hugetlbfs_files',`
        gen_require(`
                type hugetlbfs_t;
        ')

    allow $1 hugetlbfs_t:dir list_dir_perms;
        exec_files_pattern($1, hugetlbfs_t, hugetlbfs_t)
')

## kernel/filesystem.if
########################################
## <summary>
##      Dontaudit Get the attributes of all directories
##      with a filesystem type.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`fs_dontaudit_getattr_all_dirs',`
        gen_require(`
                attribute filesystem_type;
        ')

        dontaudit $1 filesystem_type:dir getattr;
')

## system/userdomain.if
########################################
## <summary>
##      Allow domain to read/write inherited users
##      fifo files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`userdom_rw_inherited_user_pipes',`
        gen_require(`
                attribute userdomain;
        ')

        allow $1 userdomain:fifo_file rw_inherited_fifo_file_perms;
')

## kernel/domain.if
########################################
## <summary>
##      Dontaudit link of process kernel keyrings
## </summary>
## <param name="domain">
##      <summary>
##      Domain to dontaudit.
##      </summary>
## </param>
#
interface(`domain_dontaudit_link_all_domains_keyrings',`
        gen_require(`
                attribute domain;
        ')

        dontaudit $1 domain:key link;
')

## kernel/domain.if
########################################
## <summary>
##      Dontaudit search of process kernel keyrings
## </summary>
## <param name="domain">
##      <summary>
##      Domain to dontaudit.
##      </summary>
## </param>
#
interface(`domain_dontaudit_search_all_domains_keyrings',`
        gen_require(`
                attribute domain;
        ')

        dontaudit $1 domain:key search;
')

## contrib/virt.if
########################################
## <summary>
##      container_file_t stub interface.  No access allowed.
## </summary>
## <param name="domain" unused="true">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`virt_stub_container_image',`
        gen_require(`
                type container_file_t;
        ')
')

interface(`virt_stub_svirt_sandbox_file',`
        gen_require(`
                type container_file_t;
                type container_ro_file_t;
        ')
')

## contrib/virt.if
########################################
## <summary>
##      Make the specified type usable as a lxc network domain
## </summary>
## <param name="type">
##      <summary>
##      Type to be used as a lxc network domain
##      </summary>
## </param>
#
template(`virt_sandbox_net_domain',`
        gen_require(`
                attribute sandbox_net_domain;
        ')

        virt_sandbox_domain($1)
        typeattribute  $1 sandbox_net_domain;
')

## contrib/virt.if
########################################
## <summary>
##      Make the specified type usable as a lxc domain
## </summary>
## <param name="type">
##      <summary>
##      Type to be used as a lxc domain
##      </summary>
## </param>
#
template(`virt_sandbox_domain',`
        gen_require(`
                attribute svirt_sandbox_domain;
        ')

        typeattribute  $1 svirt_sandbox_domain;
')

## contrib/virt.if
#######################################
## <summary>
##  Getattr on virt executable.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed to transition.
##  </summary>
## </param>
#
interface(`virt_default_capabilities',`
        gen_require(`
                attribute sandbox_caps_domain;
        ')

        typeattribute $1 sandbox_caps_domain;
')

## kernel/kernel.if
########################################
## <summary>
##      Do not audit attempts to write the
##      file in /proc.
## </summary>
## <param name="domain">
##      <summary>
##      Domain to not audit.
##      </summary>
## </param>
#
interface(`kernel_dontaudit_write_proc_files',`
        gen_require(`
                type proc_t;
        ')

        dontaudit $1 proc_t:file write;
')

## kernel/kernel.if
########################################
## <summary>
##      Execute an unlabeled file in the specified domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed to transition.
##      </summary>
## </param>
## <param name="target_domain">
##      <summary>
##      The type of the new process.
##      </summary>
## </param>
#
interface(`kernel_unlabeled_domtrans',`
        gen_require(`
                type unlabeled_t;
        ')

        read_lnk_files_pattern($1, unlabeled_t, unlabeled_t)
        domain_transition_pattern($1, unlabeled_t, $2)
        type_transition $1 unlabeled_t:process $2;
')

## kernel/kernel.if
########################################
## <summary>
##      Make general progams without labeles an entrypoint for
##      the specified domain.
## </summary>
## <param name="domain">
##      <summary>
##      The domain for which unlabeled_t is an entrypoint.
##      </summary>
## </param>
#
interface(`kernel_unlabeled_entry_type',`
        gen_require(`
                type unlabeled_t;
        ')

        allow $1 unlabeled_t:file entrypoint;
        allow $1 unlabeled_t:file { mmap_exec_file_perms ioctl lock };
')

## kernel/filesystem.if
#########################################
## <summary>
##      Create, read, write, and delete named pipes
##      on a FUSEFS filesystem.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
interface(`fs_manage_fusefs_named_pipes',`
        gen_require(`
                type fusefs_t;
        ')

        manage_fifo_files_pattern($1, fusefs_t, fusefs_t)
')

## kernel/devices.if
########################################
## <summary>
##      Mount sysfs filesystems.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dev_mount_sysfs_fs',`
        gen_require(`
                type sysfs_t;
        ')

        allow $1 sysfs_t:filesystem mount;
')

## kernel/terminal.if
########################################
## <summary>
##      Mount a pty filesystem
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`term_mount_pty_fs',`
        gen_require(`
                type devpts_t;
        ')

        allow $1 devpts_t:filesystem mount;
')

## kernel/devices.if
########################################
## <summary>
##      Allow read/write inheretid the vhost net device
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`dev_rw_inherited_vhost',`
        gen_require(`
                type device_t, vhost_device_t;
        ')

        allow $1 vhost_device_t:chr_file rw_inherited_chr_file_perms;
')

## kernel/corenetwork.if
########################################
## <summary>
##      Read and write inherited TUN/TAP virtual network device.
## </summary>
## <param name="domain">
##      <summary>
##      The domain allowed access.
##      </summary>
## </param>
#
interface(`corenet_rw_inherited_tun_tap_dev',`
        gen_require(`
                type tun_tap_device_t;
        ')

        allow $1 tun_tap_device_t:chr_file rw_inherited_chr_file_perms;
')

## kernel/files.if
########################################
## <summary>
##      Mount a filesystem on the root file system
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`files_mounton_rootfs',`
        gen_require(`
                type root_t;
        ')

        allow $1 root_t:dir { search_dir_perms mounton };
')

## system/authlogin.if
########################################
## <summary>
##      Read the passwd passwords file (/etc/passwd)
##      Allow to use sss nsswitch module for passwd and group.
##      Allow to use systemd nsswitch module for passwd and group
##      which is used for dynamic users.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`auth_read_passwd',`
        gen_require(`
                type passwd_file_t;
        ')

        allow $1 passwd_file_t:file read_file_perms;
        optional_policy(`
                sssd_read_public_files($1)
                sssd_stream_connect($1)
        ')
        init_dbus_chat($1)
')

## kernel/kernel.if
########################################
## <summary>
##      Allow caller to mounton the kernel messages file
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`kernel_mounton_core_if',`
        gen_require(`
                type proc_kcore_t;
        ')

        allow $1 proc_kcore_t:file mounton;
')

## kernel/kernel.if
########################################
## <summary>
##      Allow attempts to mounton all filesystems used by ProtectKernelTunables systemd feature.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`kernel_mounton_systemd_ProtectKernelTunables',`
        gen_require(`
                type sysctl_t;
        type sysctl_irq_t;
        type proc_t;
        type mtrr_device_t;
        type debugfs_t;
        type cgroup_t;
        ')

        allow $1 sysctl_t:dir mounton;
        allow $1 sysctl_irq_t:dir mounton;
        allow $1 proc_t:dir mounton;
        allow $1 mtrr_device_t:dir mounton;
        allow $1 debugfs_t:dir mounton;
        allow $1 cgroup_t:dir mounton;

')
')
